# -*- coding: utf-8 -*-
"""Tahmin_Dinamik.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k1EFaPryxySx5UXNXXBTN_PA2mLmC97z
"""

import pandas as pd
import sklearn.ensemble as ensemble
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from datetime import datetime, timedelta
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import GradientBoostingRegressor, AdaBoostRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.linear_model import ElasticNet
from sklearn.kernel_ridge import KernelRidge
from xgboost import XGBRegressor
import sklearn.linear_model as linear_model
from sklearn.naive_bayes import GaussianNB
import yfinance as yf


stock_symbol = 'SOL-USD'
start_date = '2005-01-01'
end_date = '2024-04-16'

# stock_data = yf.download(stock_symbol, period='950mo' , interval='1wk') HAFTALIK
# stock_data = yf.download(stock_symbol, period='730d' , interval='60m') SAATLIK
stock_data = yf.download(stock_symbol, start_date, end_date) # GUNLUK


print()
print(stock_data)
stock_data.to_csv('stock_data.csv',sep=';')

df = pd.read_csv("stock_data.csv", sep=";")

df = df.drop(columns=["Open", "High", "Close", "Adj Close", "Volume"])

df["Date"] = pd.to_datetime(df["Date"], format='%Y-%m-%d')

X = df.drop(columns=["Low"])
y = df["Low"].astype(float)


models = []

# models.append(('RandomForest', RandomForestRegressor()))
# # models.append(('SVR', SVR()))
# models.append(('DecisionTree', DecisionTreeRegressor()))
# models.append(('KNeighbors', KNeighborsRegressor()))
# models.append(('GradientBoosting', GradientBoostingRegressor()))
# models.append(('AdaBoost', AdaBoostRegressor()))
# models.append(('BaggingRegressor', ensemble.BaggingRegressor()))
# models.append(('HistGradientBoosting', ensemble.HistGradientBoostingRegressor()))
# models.append(('ExtraTreesRegressor', ensemble.ExtraTreesRegressor()))

models.append(('RandomForest', RandomForestRegressor(n_estimators=600)))
# models.append(('SVR', SVR()))
models.append(('DecisionTree', DecisionTreeRegressor()))
models.append(('KNeighbors', KNeighborsRegressor(n_neighbors=4)))
models.append(('GradientBoosting', GradientBoostingRegressor(n_estimators=500)))
models.append(('AdaBoost', AdaBoostRegressor(n_estimators=500)))
models.append(('BaggingRegressor', ensemble.BaggingRegressor(n_estimators=500)))
models.append(('HistGradientBoosting', ensemble.HistGradientBoostingRegressor( max_iter=500)))


target_date = datetime(2024, 4, 16)
input_data = pd.DataFrame({"Date": [target_date]})
input_data["Date"] = pd.to_datetime(input_data["Date"], format='%Y-%m-%d')

for name, model in models:
    model.fit(X, y)
    predicted_opening = model.predict(input_data)
    print(f" {name} :", round(predicted_opening[0],4))
    print()